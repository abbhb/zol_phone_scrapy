"""
Django settings for zol_phone project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+1fk*((&v0#t_67bh7j@5h8@&(-@=ir&t5dyx5#qa_p4)683ab'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# sys.path.insert(0, os.path.join(BASE_DIR))

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.crawler',
    'apps.control',
    'apps.visual',
    # 'channels', # web socket 通信

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 用于防止点击劫持,
    # 'utils.middlewares.ExceptionMiddleware',  # 自定义全局异常处理中间件
]

ROOT_URLCONF = 'zol_phone.urls'

TEMPLATES = [
    {
        'BACKEND' : 'django.template.backends.django.DjangoTemplates',
        'DIRS'    : [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS' : {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zol_phone.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME'  : BASE_DIR / 'db.sqlite3',
    # },
    'default': {
        'ENGINE'  : 'django.db.backends.mysql',
        'HOST'    : 'cent',
        'PORT'    : 3306,
        'USER'    : 'root',
        'PASSWORD': '123456',
        'NAME'    : 'zol_phone',
    }
}

# session 保存在redis中
CACHES = {
    'default': {
        'BACKEND'   : 'django_redis.cache.RedisCache',
        'LOCATION'  : 'redis://localhost:6379/1',
        'OPTIONS'   : {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'zol_phone',
    },
}

import time
import logging
import loguru

LOG_PATH = os.path.join(BASE_DIR, 'logs')
LOGGING = {
    'version'                 : 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters'              : {  # 日志信息显示的格式
        'verbose' : {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple'  : {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
        'standard': {
            'format': '%(asctime)s | %(levelname)-8s | %(module)s:%(funcName)s:%(lineno)d - %(message)s'
        },
    },
    'filters'                 : {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers'                : {  # 日志处理方法
        # 默认记录所有日志
        'default'    : {
            'level'      : 'DEBUG',
            'class'      : 'logging.handlers.RotatingFileHandler',
            'filename'   : os.path.join(LOG_PATH, 'debug-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes'   : 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter'  : 'verbose',  # 输出格式
            'encoding'   : 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        # 输出错误日志
        'error'      : {
            'level'      : 'ERROR',
            'class'      : 'logging.handlers.RotatingFileHandler',
            'filename'   : os.path.join(LOG_PATH, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes'   : 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter'  : 'standard',  # 输出格式
            'encoding'   : 'utf-8',  # 设置默认编码
        },
        'error-uru'  : {
            'level'      : 'ERROR',
            'class'      : 'utils.log_.InterceptTimedRotatingFileHandler',
            'filename'   : os.path.join(LOG_PATH, '.log'),
            'when'       : "D",
            'interval'   : 1,
            'backupCount': 5,
            'encoding'   : 'utf-8',
            'formatter'  : 'standard',
        },
        'warning-uru': {
            'level'      : 'ERROR',
            'class'      : 'utils.log_.InterceptTimedRotatingFileHandler',
            'filename'   : os.path.join(LOG_PATH, '.log'),
            'when'       : "D",
            'interval'   : 1,
            'backupCount': 5,
            'encoding'   : 'utf-8',
            'formatter'  : 'standard',
        },
        # 输出info日志
        'info'       : {
            'level'      : 'INFO',
            'class'      : 'logging.handlers.RotatingFileHandler',
            'filename'   : os.path.join(LOG_PATH, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes'   : 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter'  : 'simple',
            'encoding'   : 'utf-8',  # 设置默认编码
        },

        # 控制台输出
        'console'    : {
            'level'    : 'DEBUG',
            'filters'  : ['require_debug_true'],
            'class'    : 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers'                 : {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers' : [
                'console',
                # 'error',
                'info',
                'default',
                'error-uru',
                'warning-uru',
            ],  # 使用的日志处理器, 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level'    : 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 使用Minio作为S3对象存储
MINIO_ACCESS_KEY = AWS_ACCESS_KEY_ID = 'cxizCwezI4OqnCbf'
MINIO_SECRET_KEY = AWS_SECRET_ACCESS_KEY = 'Zvt2hShnCKWRq6jyAgtCg8p11OBC89fc'
MINIO_REGION = AWS_REGION_NAME = 'us-east-1'
MINIO_SCHEME = AWS_SCHEME = 'http'
MINIO_BUCKET_NAME = AWS_BUCKET_NAME = 'zol.phone'
MINIO_POINT_URL = 'cent:9090'
AWS_ENDPOINT_URL = f"{MINIO_SCHEME}://{MINIO_POINT_URL}"
AWS_URI = f"s3://{MINIO_BUCKET_NAME}"
AWS_USE_SSL = False

IMAGES_DIR = "images"

DEFAULT_FILE_STORAGE = "utils.minio.storage.MinioStorage"

SERVER_URL = "http://127.0.0.1:8000"

SCRAPYD_URL = "http://127.0.0.1:6800"

SCRAPYD_PROJECT_NAME = "phone_crawler"
